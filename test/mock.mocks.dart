// Mocks generated by Mockito 5.0.16 from annotations
// in music_app/test/mock.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:music_app/core/resource/resource.dart' as _i2;
import 'package:music_app/data/datasources/local/app_database.dart' as _i20;
import 'package:music_app/data/datasources/remote/music_service.dart' as _i10;
import 'package:music_app/data/model/album/get_album_tracks_response.dart'
    as _i13;
import 'package:music_app/data/model/artist/artist_search_response.dart'
    as _i11;
import 'package:music_app/data/model/artist/get_top_albums_response.dart'
    as _i12;
import 'package:music_app/domin/entities/album.dart' as _i7;
import 'package:music_app/domin/entities/artist.dart' as _i9;
import 'package:music_app/domin/repositories/albums_repository.dart' as _i4;
import 'package:music_app/domin/repositories/artist_repository.dart' as _i5;
import 'package:music_app/domin/usecases/albums/get_album_track.dart' as _i14;
import 'package:music_app/domin/usecases/artists/get_top_albums.dart' as _i15;
import 'package:music_app/domin/usecases/artists/search_for_artist.dart'
    as _i16;
import 'package:music_app/domin/usecases/artists/search_for_artist_params.dart'
    as _i8;
import 'package:music_app/domin/usecases/favorite_albums/add_album_to_favorite_list.dart'
    as _i17;
import 'package:music_app/domin/usecases/favorite_albums/delete_album_from_favorite_list.dart'
    as _i18;
import 'package:music_app/domin/usecases/favorite_albums/get_favorite_albums.dart'
    as _i19;
import 'package:retrofit/retrofit.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeResource_0<T> extends _i1.Fake implements _i2.Resource<T> {}

class _FakeHttpResponse_1<T> extends _i1.Fake implements _i3.HttpResponse<T> {}

class _FakeAlbumsRepository_2 extends _i1.Fake implements _i4.AlbumsRepository {
}

class _FakeArtistRepository_3 extends _i1.Fake implements _i5.ArtistRepository {
}

/// A class which mocks [AlbumsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlbumsRepository extends _i1.Mock implements _i4.AlbumsRepository {
  MockAlbumsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Resource<dynamic>> getAlbumTracks(_i7.Album? album) =>
      (super.noSuchMethod(Invocation.method(#getAlbumTracks, [album]),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  _i6.Future<_i2.Resource<dynamic>> getFavoritesAlbums() => (super.noSuchMethod(
          Invocation.method(#getFavoritesAlbums, []),
          returnValue:
              Future<_i2.Resource<dynamic>>.value(_FakeResource_0<dynamic>()))
      as _i6.Future<_i2.Resource<dynamic>>);
  @override
  _i6.Future<_i2.Resource<dynamic>> saveAlbum(_i7.Album? album) =>
      (super.noSuchMethod(Invocation.method(#saveAlbum, [album]),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  _i6.Future<_i2.Resource<dynamic>> deleteAlbum(_i7.Album? album) =>
      (super.noSuchMethod(Invocation.method(#deleteAlbum, [album]),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ArtistRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockArtistRepository extends _i1.Mock implements _i5.ArtistRepository {
  MockArtistRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Resource<dynamic>> searchForArtist(
          _i8.SearchForArtistParams? params) =>
      (super.noSuchMethod(Invocation.method(#searchForArtist, [params]),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  _i6.Future<_i2.Resource<dynamic>> getTopAlbums(_i9.Artist? artist) =>
      (super.noSuchMethod(Invocation.method(#getTopAlbums, [artist]),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MusicService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMusicService extends _i1.Mock implements _i10.MusicService {
  MockMusicService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.HttpResponse<_i11.ArtistSearchResponse>> searchForArtist(
          String? artist,
          {String? apiKey = r'bb5f61a90397c220424a8b4220ea5d88',
          String? format = r'json',
          String? method = r'artist.search'}) =>
      (super.noSuchMethod(
              Invocation.method(#searchForArtist, [artist],
                  {#apiKey: apiKey, #format: format, #method: method}),
              returnValue:
                  Future<_i3.HttpResponse<_i11.ArtistSearchResponse>>.value(
                      _FakeHttpResponse_1<_i11.ArtistSearchResponse>()))
          as _i6.Future<_i3.HttpResponse<_i11.ArtistSearchResponse>>);
  @override
  _i6.Future<_i3.HttpResponse<_i12.GetTopAlbumsResponse>> getTopAlbums(
          String? mbid,
          {String? apiKey = r'bb5f61a90397c220424a8b4220ea5d88',
          String? format = r'json',
          String? method = r'artist.gettopalbums'}) =>
      (super.noSuchMethod(
              Invocation.method(#getTopAlbums, [mbid],
                  {#apiKey: apiKey, #format: format, #method: method}),
              returnValue:
                  Future<_i3.HttpResponse<_i12.GetTopAlbumsResponse>>.value(
                      _FakeHttpResponse_1<_i12.GetTopAlbumsResponse>()))
          as _i6.Future<_i3.HttpResponse<_i12.GetTopAlbumsResponse>>);
  @override
  _i6.Future<_i3.HttpResponse<_i13.GetAlbumTracksResponse>> getAlbumTracks(
          String? mbid, String? artist,
          {String? apiKey = r'bb5f61a90397c220424a8b4220ea5d88',
          String? format = r'json',
          String? method = r'album.getinfo'}) =>
      (super.noSuchMethod(
              Invocation.method(#getAlbumTracks, [mbid, artist],
                  {#apiKey: apiKey, #format: format, #method: method}),
              returnValue:
                  Future<_i3.HttpResponse<_i13.GetAlbumTracksResponse>>.value(
                      _FakeHttpResponse_1<_i13.GetAlbumTracksResponse>()))
          as _i6.Future<_i3.HttpResponse<_i13.GetAlbumTracksResponse>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetAlbumTracks].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAlbumTracks extends _i1.Mock implements _i14.GetAlbumTracks {
  MockGetAlbumTracks() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AlbumsRepository get albumsRepository =>
      (super.noSuchMethod(Invocation.getter(#albumsRepository),
          returnValue: _FakeAlbumsRepository_2()) as _i4.AlbumsRepository);
  @override
  set albumsRepository(_i4.AlbumsRepository? _albumsRepository) => super
      .noSuchMethod(Invocation.setter(#albumsRepository, _albumsRepository),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.Resource<dynamic>> call({_i7.Album? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetTopAlbums].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopAlbums extends _i1.Mock implements _i15.GetTopAlbums {
  MockGetTopAlbums() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ArtistRepository get artistRepository =>
      (super.noSuchMethod(Invocation.getter(#artistRepository),
          returnValue: _FakeArtistRepository_3()) as _i5.ArtistRepository);
  @override
  set artistRepository(_i5.ArtistRepository? _artistRepository) => super
      .noSuchMethod(Invocation.setter(#artistRepository, _artistRepository),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.Resource<dynamic>> call({_i9.Artist? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SearchForArtist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchForArtist extends _i1.Mock implements _i16.SearchForArtist {
  MockSearchForArtist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ArtistRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeArtistRepository_3()) as _i5.ArtistRepository);
  @override
  set repository(_i5.ArtistRepository? _repository) =>
      super.noSuchMethod(Invocation.setter(#repository, _repository),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.Resource<dynamic>> call({_i8.SearchForArtistParams? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AddAlbumFromFavoriteList].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddAlbumFromFavoriteList extends _i1.Mock
    implements _i17.AddAlbumFromFavoriteList {
  MockAddAlbumFromFavoriteList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AlbumsRepository get albumsRepository =>
      (super.noSuchMethod(Invocation.getter(#albumsRepository),
          returnValue: _FakeAlbumsRepository_2()) as _i4.AlbumsRepository);
  @override
  set albumsRepository(_i4.AlbumsRepository? _albumsRepository) => super
      .noSuchMethod(Invocation.setter(#albumsRepository, _albumsRepository),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.Resource<dynamic>> call({_i7.Album? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [DeleteAlbumFromFavoriteList].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAlbumFromFavoriteList extends _i1.Mock
    implements _i18.DeleteAlbumFromFavoriteList {
  MockDeleteAlbumFromFavoriteList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AlbumsRepository get albumsRepository =>
      (super.noSuchMethod(Invocation.getter(#albumsRepository),
          returnValue: _FakeAlbumsRepository_2()) as _i4.AlbumsRepository);
  @override
  set albumsRepository(_i4.AlbumsRepository? _albumsRepository) => super
      .noSuchMethod(Invocation.setter(#albumsRepository, _albumsRepository),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.Resource<dynamic>> call({_i7.Album? params}) =>
      (super.noSuchMethod(Invocation.method(#call, [], {#params: params}),
              returnValue: Future<_i2.Resource<dynamic>>.value(
                  _FakeResource_0<dynamic>()))
          as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetFavoriteAlbums].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavoriteAlbums extends _i1.Mock implements _i19.GetFavoriteAlbums {
  MockGetFavoriteAlbums() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AlbumsRepository get albumsRepository =>
      (super.noSuchMethod(Invocation.getter(#albumsRepository),
          returnValue: _FakeAlbumsRepository_2()) as _i4.AlbumsRepository);
  @override
  set albumsRepository(_i4.AlbumsRepository? _albumsRepository) => super
      .noSuchMethod(Invocation.setter(#albumsRepository, _albumsRepository),
          returnValueForMissingStub: null);
  @override
  _i6.Future<_i2.Resource<dynamic>> call() => (super.noSuchMethod(
          Invocation.method(#call, []),
          returnValue:
              Future<_i2.Resource<dynamic>>.value(_FakeResource_0<dynamic>()))
      as _i6.Future<_i2.Resource<dynamic>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppDataBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDataBase extends _i1.Mock implements _i20.AppDataBase {
  MockAppDataBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> deleteAlbum(_i12.AlbumModel? album) =>
      (super.noSuchMethod(Invocation.method(#deleteAlbum, [album]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> saveAlbum(_i12.AlbumModel? album) =>
      (super.noSuchMethod(Invocation.method(#saveAlbum, [album]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<List<_i12.AlbumModel>> getFavoritesAlbums() => (super.noSuchMethod(
          Invocation.method(#getFavoritesAlbums, []),
          returnValue: Future<List<_i12.AlbumModel>>.value(<_i12.AlbumModel>[]))
      as _i6.Future<List<_i12.AlbumModel>>);
  @override
  _i6.Future<void> addTracks(
          List<_i13.TrackModel>? tracks, _i12.AlbumModel? album) =>
      (super.noSuchMethod(Invocation.method(#addTracks, [tracks, album]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i6.Future<void>);
  @override
  String toString() => super.toString();
}
